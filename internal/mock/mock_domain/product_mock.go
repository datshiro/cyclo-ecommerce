// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/product.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	models "github.com/datshiro/cyclo-ecommerce/internal/models"
	gomock "github.com/golang/mock/gomock"
	qm "github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockProductRepo) CreateMany(ctx context.Context, products models.ProductSlice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockProductRepoMockRecorder) CreateMany(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockProductRepo)(nil).CreateMany), ctx, products)
}

// CreateOne mocks base method.
func (m *MockProductRepo) CreateOne(ctx context.Context, product *models.Product) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, product)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockProductRepoMockRecorder) CreateOne(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockProductRepo)(nil).CreateOne), ctx, product)
}

// GetMany mocks base method.
func (m *MockProductRepo) GetMany(ctx context.Context, mods ...qm.QueryMod) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMany", varargs...)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockProductRepoMockRecorder) GetMany(ctx interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockProductRepo)(nil).GetMany), varargs...)
}

// GetOneById mocks base method.
func (m *MockProductRepo) GetOneById(ctx context.Context, id int) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", ctx, id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockProductRepoMockRecorder) GetOneById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockProductRepo)(nil).GetOneById), ctx, id)
}

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockProductUsecase) CreateMany(ctx context.Context, products models.ProductSlice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockProductUsecaseMockRecorder) CreateMany(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockProductUsecase)(nil).CreateMany), ctx, products)
}

// CreateOne mocks base method.
func (m *MockProductUsecase) CreateOne(ctx context.Context, product *models.Product) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, product)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockProductUsecaseMockRecorder) CreateOne(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockProductUsecase)(nil).CreateOne), ctx, product)
}

// GetMany mocks base method.
func (m *MockProductUsecase) GetMany(ctx context.Context, mods ...qm.QueryMod) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range mods {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMany", varargs...)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockProductUsecaseMockRecorder) GetMany(ctx interface{}, mods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, mods...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockProductUsecase)(nil).GetMany), varargs...)
}

// GetManyWithFilters mocks base method.
func (m *MockProductUsecase) GetManyWithFilters(ctx context.Context, brandIDs []int, minPrice, maxPrice float64) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyWithFilters", ctx, brandIDs, minPrice, maxPrice)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyWithFilters indicates an expected call of GetManyWithFilters.
func (mr *MockProductUsecaseMockRecorder) GetManyWithFilters(ctx, brandIDs, minPrice, maxPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyWithFilters", reflect.TypeOf((*MockProductUsecase)(nil).GetManyWithFilters), ctx, brandIDs, minPrice, maxPrice)
}

// GetOneById mocks base method.
func (m *MockProductUsecase) GetOneById(ctx context.Context, id int) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", ctx, id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockProductUsecaseMockRecorder) GetOneById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockProductUsecase)(nil).GetOneById), ctx, id)
}
